// ===== –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ì–†–´ –ë–õ–≠–ö–î–ñ–ï–ö =====

class BlackjackGame {
    constructor() {
        this.deck = [];
        this.playerCards = [];
        this.dealerCards = [];
        this.playerScore = 0;
        this.dealerScore = 0;
        this.currentBet = 50;
        this.playerBalance = 1000;
        this.playerLevel = 1;
        this.gameInProgress = false;
        this.canDouble = false;
        this.achievements = [];
        
        this.initializeGame();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    initializeGame() {
        this.updateUI();
        this.loadPlayerData();
        this.createDeck();
        this.showMessage("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BlackJack Casino!");
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
    createDeck() {
        const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
        const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
        
        this.deck = [];
        for (let suit of suits) {
            for (let rank of ranks) {
                this.deck.push({
                    rank: rank,
                    suit: suit,
                    value: this.getCardValue(rank)
                });
            }
        }
        this.shuffleDeck();
    }

    // –¢–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
    shuffleDeck() {
        for (let i = this.deck.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
    getCardValue(rank) {
        if (rank === 'A') return 11;
        if (['J', 'Q', 'K'].includes(rank)) return 10;
        return parseInt(rank);
    }

    // –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç—É–∑–æ–≤
    calculateScore(cards) {
        let score = 0;
        let aces = 0;

        for (let card of cards) {
            if (card.rank === 'A') {
                aces++;
            }
            score += card.value;
        }

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç—É–∑—ã
        while (score > 21 && aces > 0) {
            score -= 10;
            aces--;
        }

        return score;
    }

    // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    startNewGame() {
        if (this.playerBalance < this.currentBet) {
            this.showMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!");
            return;
        }

        this.gameInProgress = true;
        this.canDouble = true;
        this.playerCards = [];
        this.dealerCards = [];
        
        // –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        this.playerBalance -= this.currentBet;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∫–∞—Ä—Ç
        if (this.deck.length < 20) {
            this.createDeck();
        }

        // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
        this.playerCards.push(this.drawCard());
        this.dealerCards.push(this.drawCard());
        this.playerCards.push(this.drawCard());
        this.dealerCards.push(this.drawCard());

        this.updateScores();
        this.renderCards();
        this.updateUI();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª—ç–∫–¥–∂–µ–∫ –∏–≥—Ä–æ–∫–∞
        if (this.playerScore === 21) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–ª—ç–∫–¥–∂–µ–∫ —É –¥–∏–ª–µ—Ä–∞
            const dealerFirstCard = this.dealerCards[0].value;
            if (dealerFirstCard === 10 || dealerFirstCard === 11) {
                // –£ –¥–∏–ª–µ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª—ç–∫–¥–∂–µ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º
                this.showMessage("üé© –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª—ç–∫–¥–∂–µ–∫ –¥–∏–ª–µ—Ä–∞...");
                setTimeout(() => {
                    this.revealDealerCard();
                    if (this.calculateScore(this.dealerCards) === 21) {
                        this.showMessage("ü§ù –î–≤–∞ –±–ª—ç–∫–¥–∂–µ–∫–∞! –ù–∏—á—å—è!");
                        this.endGame('push', this.currentBet);
                    } else {
                        this.showMessage("üéâ –ë–õ–≠–ö–î–ñ–ï–ö! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!");
                        this.playSound('win'); // –ó–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
                        this.endGame('blackjack');
                    }
                }, 1500);
            } else {
                this.showMessage("üéâ –ë–õ–≠–ö–î–ñ–ï–ö! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!");
                this.playSound('win'); // –ó–≤—É–∫ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
                this.endGame('blackjack');
            }
        } else {
            this.showMessage("üéØ –í–∞—à —Ö–æ–¥! –í–ó–Ø–¢–¨ –∏–ª–∏ –°–¢–û–ü?");
            this.showGameButtons();
            
            // –ü—É–ª—å—Å–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
            if (window.AnimationController) {
                setTimeout(() => {
                    const hitBtn = document.querySelector('.hit-btn');
                    const standBtn = document.querySelector('.stand-btn');
                    if (hitBtn) AnimationController.pulseElement(hitBtn);
                    if (standBtn) AnimationController.pulseElement(standBtn);
                }, 500);
            }
        }

        // –ó–≤—É–∫ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç
        this.playSound('deal');
    }

    // –í–∑—è—Ç—å –∫–∞—Ä—Ç—É (HIT)
    hit() {
        if (!this.gameInProgress) return;

        this.playerCards.push(this.drawCard());
        this.canDouble = false; // –ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –Ω–µ–ª—å–∑—è —É–¥–≤–∞–∏–≤–∞—Ç—å
        this.updateScores();
        this.renderCards();

        if (this.playerScore > 21) {
            // –ü–ï–†–ï–ë–û–† - –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
            this.showMessage("üí• –ü–ï–†–ï–ë–û–†! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!");
            this.endGame('bust');
        } else if (this.playerScore === 21) {
            // –†–æ–≤–Ω–æ 21 - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥–∏–ª–µ—Ä—É
            this.showMessage("üéØ 21 –æ—á–∫–æ! –•–æ–¥ –¥–∏–ª–µ—Ä–∞...");
            setTimeout(() => {
                this.stand();
            }, 1000);
        } else {
            this.showMessage("üéØ –í–∞—à —Ö–æ–¥! –í–ó–Ø–¢–¨ –∏–ª–∏ –°–¢–û–ü?");
        }

        this.updateUI();
        this.playSound('hit');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è (STAND)
    stand() {
        if (!this.gameInProgress) return;

        this.canDouble = false;
        this.showMessage("üé© –•–æ–¥ –¥–∏–ª–µ—Ä–∞...");
        
        // –î–∏–ª–µ—Ä –∏–≥—Ä–∞–µ—Ç
        setTimeout(() => {
            this.dealerPlay();
        }, 1000);

        this.updateUI();
        this.playSound('stand');
    }

    // –£–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É (DOUBLE) - —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç
    doubleDown() {
        if (!this.gameInProgress || !this.canDouble || this.playerCards.length !== 2) return;
        
        if (this.playerBalance < this.currentBet) {
            this.showMessage("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!");
            return;
        }

        // –£–¥–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        this.playerBalance -= this.currentBet;
        this.currentBet *= 2;
        this.canDouble = false;
        
        this.showMessage("üí∞ –°—Ç–∞–≤–∫–∞ —É–¥–≤–æ–µ–Ω–∞! –ü–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É...");
        
        // –ü—Ä–∏ —É–¥–≤–æ–µ–Ω–∏–∏ –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –û–î–ù–£ –∫–∞—Ä—Ç—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ö–æ–¥
        setTimeout(() => {
            this.playerCards.push(this.drawCard());
            this.updateScores();
            this.renderCards();

            if (this.playerScore > 21) {
                this.showMessage("üí• –ü–ï–†–ï–ë–û–† –ø–æ—Å–ª–µ —É–¥–≤–æ–µ–Ω–∏—è!");
                this.endGame('bust');
            } else {
                this.showMessage(`üí∞ ${this.playerScore} –æ—á–∫–æ–≤. –•–æ–¥ –¥–∏–ª–µ—Ä–∞...`);
                setTimeout(() => {
                    this.dealerPlay();
                }, 1000);
            }
            
            this.updateUI();
        }, 800);

        this.playSound('double');
    }

    // –ò–≥—Ä–∞ –¥–∏–ª–µ—Ä–∞ - –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–ª—ç–∫–¥–∂–µ–∫–∞
    dealerPlay() {
        this.revealDealerCard();
        
        const playDealer = () => {
            this.dealerScore = this.calculateScore(this.dealerCards);
            
            // –î–∏–ª–µ—Ä –û–ë–Ø–ó–ê–ù –¥–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–æ 17 –æ—á–∫–æ–≤ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
            if (this.dealerScore < 17) {
                this.showMessage(`üé© –î–∏–ª–µ—Ä: ${this.dealerScore} –æ—á–∫–æ–≤, –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É...`);
                setTimeout(() => {
                    this.dealerCards.push(this.drawCard());
                    this.renderCards();
                    playDealer(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å—à–µ
                }, 800);
            } else {
                // –ü—Ä–∏ 17+ –¥–∏–ª–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
                if (this.dealerScore > 21) {
                    this.showMessage(`üé© –î–∏–ª–µ—Ä: ${this.dealerScore} - –ü–ï–†–ï–ë–û–†!`);
                } else {
                    this.showMessage(`üé© –î–∏–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —Å ${this.dealerScore} –æ—á–∫–∞–º–∏`);
                }
                setTimeout(() => {
                    this.determineWinner();
                }, 1000);
            }
        };

        setTimeout(playDealer, 500);
    }

    // –û—Ç–∫—Ä—ã—Ç—å —Å–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
    revealDealerCard() {
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
        this.gameInProgress = false; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –∏–≥—Ä—ã
        this.renderDealerCards();
        this.updateScores();
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    determineWinner() {
        this.updateScores();
        let winAmount = 0;
        let message = "";
        let result = "";

        if (this.dealerScore > 21) {
            // –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª
            if (this.playerScore === 21 && this.playerCards.length === 2) {
                winAmount = Math.floor(this.currentBet * 2.5); // –ë–ª—ç–∫–¥–∂–µ–∫ 3:2
                message = "üéâ –ë–õ–≠–ö–î–ñ–ï–ö! –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª!";
                result = "blackjack";
            } else {
                winAmount = this.currentBet * 2;
                message = "üéâ –ü–û–ë–ï–î–ê! –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª!";
                result = "win";
            }
        } else if (this.playerScore > this.dealerScore) {
            // –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª
            if (this.playerScore === 21 && this.playerCards.length === 2) {
                winAmount = Math.floor(this.currentBet * 2.5);
                message = "üéâ –ë–õ–≠–ö–î–ñ–ï–ö! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!";
                result = "blackjack";
            } else {
                winAmount = this.currentBet * 2;
                message = "üéâ –ü–û–ë–ï–î–ê! –£ –≤–∞—Å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!";
                result = "win";
            }
        } else if (this.playerScore === this.dealerScore) {
            // –ù–∏—á—å—è
            winAmount = this.currentBet;
            message = "ü§ù –ù–ò–ß–¨–Ø! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.";
            result = "push";
        } else {
            // –î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª
            winAmount = 0;
            message = "üòî –ü–û–†–ê–ñ–ï–ù–ò–ï! –£ –¥–∏–ª–µ—Ä–∞ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤.";
            result = "lose";
        }

        this.showMessage(message);
        this.endGame(result, winAmount);
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    endGame(result, winAmount = 0) {
        this.gameInProgress = false;
        const oldBalance = this.playerBalance;
        this.playerBalance += winAmount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updatePlayerStats(result, winAmount);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        if (winAmount > 0) {
            this.showVictory(winAmount);
            this.createFireworks();
            this.playSound('win');
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            if (window.AnimationController && winAmount > 0) {
                const balanceElement = document.getElementById('playerBalance');
                AnimationController.animateBalanceIncrease(balanceElement, winAmount - (this.playerBalance - oldBalance));
            }
        } else if (result === 'push') {
            this.playSound('push');
        } else {
            this.playSound('lose');
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
            if (window.AnimationController) {
                const balanceElement = document.getElementById('playerBalance');
                AnimationController.shakeElement(balanceElement);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements(result);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∫ –±–∞–∑–æ–≤–æ–π
        this.currentBet = Math.min(this.currentBet, 50);
        
        this.updateUI();
        this.hideGameButtons();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ—Ç–æ–≤–∏–º –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        setTimeout(() => {
            this.showStartButton();
        }, 3000);
    }

    // –í–∑—è—Ç—å –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
    drawCard() {
        return this.deck.pop();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    updateScores() {
        this.playerScore = this.calculateScore(this.playerCards);
        this.dealerScore = this.calculateScore(this.dealerCards);
        
        const playerScoreElement = document.getElementById('playerScore');
        if (playerScoreElement) {
            playerScoreElement.textContent = this.playerScore;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç –¥–∏–ª–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        const dealerScoreElement = document.getElementById('dealerScore');
        if (dealerScoreElement) {
            if (this.gameInProgress && this.dealerCards.length >= 2) {
                // –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
                const visibleCards = [this.dealerCards[0]];
                const visibleScore = this.calculateScore(visibleCards);
                dealerScoreElement.textContent = visibleScore;
            } else {
                // –ü–æ—Å–ª–µ –∏–≥—Ä—ã –∏–ª–∏ –µ—Å–ª–∏ –∫–∞—Ä—Ç –º–µ–Ω—å—à–µ 2, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—á–µ—Ç
                dealerScoreElement.textContent = this.dealerScore;
            }
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç
    renderCards() {
        this.renderPlayerCards();
        this.renderDealerCards();
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
    renderPlayerCards() {
        const container = document.getElementById('playerCards');
        container.innerHTML = '';
        
        this.playerCards.forEach((card, index) => {
            const cardElement = this.createCardElement(card);
            container.appendChild(cardElement);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (window.AnimationController) {
                AnimationController.animateCardDeal(cardElement, index * 200);
            } else {
                // Fallback –∞–Ω–∏–º–∞—Ü–∏—è
                cardElement.style.animationDelay = `${index * 0.2}s`;
                cardElement.classList.add('card-appear');
            }
        });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç –¥–∏–ª–µ—Ä–∞
    renderDealerCards() {
        const container = document.getElementById('dealerCards');
        container.innerHTML = '';
        
        this.dealerCards.forEach((card, index) => {
            let cardElement;
            
            if (index === 1 && this.gameInProgress) {
                // –°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞
                cardElement = document.createElement('div');
                cardElement.className = 'card face-down';
                cardElement.innerHTML = `
                    <div class="card-back">
                        <div class="card-pattern">üé∞</div>
                    </div>
                `;
            } else {
                cardElement = this.createCardElement(card);
            }
            
            container.appendChild(cardElement);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if (window.AnimationController) {
                AnimationController.animateCardDeal(cardElement, index * 200);
            } else {
                // Fallback –∞–Ω–∏–º–∞—Ü–∏—è
                cardElement.style.animationDelay = `${index * 0.2}s`;
                cardElement.classList.add('card-appear');
            }
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã
    createCardElement(card) {
        const cardElement = document.createElement('div');
        cardElement.className = `card ${this.getCardColor(card.suit)}`;
        cardElement.innerHTML = `
            <div class="card-value">${card.rank}</div>
            <div class="card-suit">${card.suit}</div>
        `;
        return cardElement;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫–∞—Ä—Ç—ã
    getCardColor(suit) {
        return ['‚ô•', '‚ô¶'].includes(suit) ? 'red' : 'black';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        const balanceEl = document.getElementById('playerBalance');
        const levelEl = document.getElementById('playerLevel');
        const betEl = document.getElementById('currentBet');
        
        if (balanceEl) balanceEl.textContent = this.playerBalance;
        if (levelEl) levelEl.textContent = this.playerLevel;
        if (betEl) betEl.textContent = this.currentBet;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∏–¥–∏–º—ã
        this.updateDoubleButton();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    showMessage(message) {
        const messageElement = document.getElementById('gameMessage');
        messageElement.textContent = message;
        messageElement.classList.add('message-update');
        setTimeout(() => {
            messageElement.classList.remove('message-update');
        }, 500);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
    showGameButtons() {
        const actionButtons = document.getElementById('actionButtons');
        const playButtons = document.getElementById('playButtons');
        const bettingSection = document.getElementById('bettingSection');
        
        if (actionButtons) actionButtons.style.display = 'none';
        if (playButtons) playButtons.style.display = 'flex';
        if (bettingSection) bettingSection.style.display = 'none';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ DOUBLE
        this.updateDoubleButton();
    }

    // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
    hideGameButtons() {
        const playButtons = document.getElementById('playButtons');
        if (playButtons) playButtons.style.display = 'none';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    showStartButton() {
        const actionButtons = document.getElementById('actionButtons');
        const bettingSection = document.getElementById('bettingSection');
        
        if (actionButtons) actionButtons.style.display = 'flex';
        if (bettingSection) bettingSection.style.display = 'flex';
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ DOUBLE
    updateDoubleButton() {
        const doubleBtn = document.getElementById('doubleButton');
        if (doubleBtn) {
            if (this.canDouble && this.currentBet * 2 <= this.playerBalance) {
                doubleBtn.disabled = false;
            } else {
                doubleBtn.disabled = true;
            }
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    changeBet(amount) {
        if (this.gameInProgress) return;
        
        const newBet = this.currentBet + amount;
        if (newBet >= 10 && newBet <= this.playerBalance) {
            this.currentBet = newBet;
            this.updateUI();
            this.playSound('bet');
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏
    setBet(amount) {
        if (this.gameInProgress) return;
        
        if (amount <= this.playerBalance) {
            this.currentBet = amount;
            this.updateUI();
            this.playSound('bet');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã
    showVictory(amount) {
        const modal = document.getElementById('victoryModal');
        const amountElement = document.getElementById('victoryAmount');
        amountElement.textContent = `+${amount} üíé`;
        modal.style.display = 'flex';
    }



    // –°–æ–∑–¥–∞—Ç—å —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫
    createFireworks() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∏–º–∞—Ü–∏–π
        if (window.AnimationController) {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤ –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    const x = Math.random() * window.innerWidth;
                    const y = Math.random() * (window.innerHeight / 2) + window.innerHeight / 4;
                    AnimationController.createFirework(x, y);
                }, i * 300);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
            AnimationController.createWinAnimation();
        }
        
        // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–∫ fallback
        const container = document.getElementById('winEffects');
        const colors = ['#ffd700', '#ff6b6b', '#00ff88', '#3498db', '#e74c3c'];
        
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                const firework = document.createElement('div');
                firework.className = 'firework';
                firework.style.left = Math.random() * 100 + '%';
                firework.style.top = Math.random() * 100 + '%';
                firework.style.background = colors[Math.floor(Math.random() * colors.length)];
                container.appendChild(firework);
                
                setTimeout(() => {
                    firework.remove();
                }, 1000);
            }, i * 100);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements(result) {
        const achievements = [];
        
        if (result === 'blackjack') {
            achievements.push({ text: 'üéâ –ë–ª—ç–∫–¥–∂–µ–∫!', points: 50 });
        }
        
        if (this.playerBalance >= 2000 && !this.achievements.includes('rich')) {
            achievements.push({ text: 'üí∞ –ë–æ–≥–∞—á!', points: 100 });
            this.achievements.push('rich');
        }
        
        if (this.playerCards.length >= 5 && this.playerScore <= 21 && !this.achievements.includes('five_card')) {
            achievements.push({ text: 'üéØ –ü—è—Ç—å –∫–∞—Ä—Ç!', points: 75 });
            this.achievements.push('five_card');
        }
        
        achievements.forEach((achievement, index) => {
            setTimeout(() => {
                this.showAchievement(achievement.text);
            }, index * 1000);
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    showAchievement(text) {
        const container = document.getElementById('achievements');
        const achievement = document.createElement('div');
        achievement.className = 'achievement';
        achievement.textContent = text;
        container.appendChild(achievement);
        
        setTimeout(() => {
            achievement.remove();
        }, 3000);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
    updatePlayerStats(result, winAmount) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (window.playerStats) {
            const betAmount = result === 'push' ? this.currentBet : 
                            (result === 'win' || result === 'blackjack') ? this.currentBet : this.currentBet;
            window.playerStats.updateGameStats(result, betAmount, winAmount);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const newAchievements = window.playerStats.checkNewAchievements();
            newAchievements.forEach(achievement => {
                this.showAchievement(`${achievement.title}: ${achievement.description}`);
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –±–æ—Ç–∞
        if (window.Telegram && window.Telegram.WebApp) {
            const stats = window.playerStats ? window.playerStats.getDisplayStats() : {};
            const data = {
                result: result,
                winAmount: winAmount,
                balance: this.playerBalance,
                level: this.playerLevel,
                stats: stats
            };
            
            window.Telegram.WebApp.sendData(JSON.stringify(data));
        }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
    playSound(type) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∑–≤—É–∫–æ–≤
        if (window.soundManager) {
            window.soundManager.play(type);
        }
        
        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const hapticType = {
                'win': 'heavy',
                'lose': 'heavy', 
                'blackjack': 'heavy',
                'deal': 'light',
                'hit': 'light',
                'stand': 'medium',
                'double': 'medium',
                'bet': 'light'
            };
            
            window.Telegram.WebApp.HapticFeedback.impactOccurred(hapticType[type] || 'light');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    loadPlayerData() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const initData = window.Telegram.WebApp.initDataUnsafe;
            if (initData.user) {
                // –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let game;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
window.addEventListener('DOMContentLoaded', () => {
    game = new BlackjackGame();
});

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø HTML =====

function startNewGame() {
    if (game) game.startNewGame();
}

function hit() {
    if (game) game.hit();
}

function stand() {
    if (game) game.stand();
}

function doubleDown() {
    if (game) game.doubleDown();
}

function changeBet(amount) {
    if (game) game.changeBet(amount);
}

function setBet(amount) {
    if (game) game.setBet(amount);
}

function toggleSound() {
    if (window.soundManager) {
        const enabled = window.soundManager.toggle();
        const button = document.getElementById('soundToggle');
        if (button) {
            button.textContent = enabled ? 'üîä' : 'üîá';
            button.title = enabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
        }
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
        if (enabled) {
            window.soundManager.play('bet');
        }
    }
}

function closeModal() {
    const modal = document.getElementById('victoryModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function showStats() {
    if (!window.playerStats) return;
    
    const modal = document.getElementById('statsModal');
    const content = document.getElementById('statsContent');
    const stats = window.playerStats.getDisplayStats();
    
    content.innerHTML = `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">üéÆ –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</div>
                <div class="stat-row">
                    <span>–í—Å–µ–≥–æ –∏–≥—Ä:</span>
                    <span>${stats.totalGames}</span>
                </div>
                <div class="stat-row">
                    <span>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</span>
                    <span class="win-rate">${stats.winRate}%</span>
                </div>
                <div class="stat-row">
                    <span>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                    <span class="${stats.netProfit >= 0 ? 'profit-positive' : 'profit-negative'}">
                        ${stats.netProfit >= 0 ? '+' : ''}${stats.netProfit} üíé
                    </span>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-title">üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´</div>
                <div class="stat-row">
                    <span>–ü–æ–±–µ–¥—ã:</span>
                    <span class="wins">${stats.wins}</span>
                </div>
                <div class="stat-row">
                    <span>–ü–æ—Ä–∞–∂–µ–Ω–∏—è:</span>
                    <span class="losses">${stats.losses}</span>
                </div>
                <div class="stat-row">
                    <span>–ù–∏—á—å–∏:</span>
                    <span>${stats.pushes}</span>
                </div>
                <div class="stat-row">
                    <span>–ë–ª—ç–∫–¥–∂–µ–∫–∏:</span>
                    <span class="blackjacks">üÉè ${stats.blackjacks}</span>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-title">üî• –°–ï–†–ò–ò</div>
                <div class="stat-row">
                    <span>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:</span>
                    <span class="${stats.currentStreak > 0 ? 'streak-positive' : stats.currentStreak < 0 ? 'streak-negative' : ''}">
                        ${stats.currentStreak > 0 ? '+' : ''}${stats.currentStreak}
                    </span>
                </div>
                <div class="stat-row">
                    <span>–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥:</span>
                    <span class="streak-positive">+${stats.bestWinStreak}</span>
                </div>
                <div class="stat-row">
                    <span>–•—É–¥—à–∞—è —Å–µ—Ä–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π:</span>
                    <span class="streak-negative">-${stats.bestLoseStreak}</span>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-title">üí∞ –†–ï–ö–û–†–î–´</div>
                <div class="stat-row">
                    <span>–ö—Ä—É–ø–Ω–µ–π—à–∏–π –≤—ã–∏–≥—Ä—ã—à:</span>
                    <span class="big-win">+${stats.biggestWin} üíé</span>
                </div>
                <div class="stat-row">
                    <span>–ö—Ä—É–ø–Ω–µ–π—à–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à:</span>
                    <span class="big-loss">-${stats.biggestLoss} üíé</span>
                </div>
                <div class="stat-row">
                    <span>–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞:</span>
                    <span>${stats.averageBet} üíé</span>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-title">‚è±Ô∏è –í–†–ï–ú–Ø –ò–ì–†–´</div>
                <div class="stat-row">
                    <span>–°–µ—Å—Å–∏–π —Å—ã–≥—Ä–∞–Ω–æ:</span>
                    <span>${stats.sessionsPlayed}</span>
                </div>
                <div class="stat-row">
                    <span>–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ:</span>
                    <span>${stats.timePlayedHours}—á</span>
                </div>
                <div class="stat-row">
                    <span>–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:</span>
                    <span>${stats.currentSession.duration}–º–∏–Ω</span>
                </div>
            </div>
            
            <div class="stat-card achievements-card">
                <div class="stat-title">üèÖ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (${stats.totalAchievements})</div>
                <div class="achievements-list">
                    ${stats.achievements.length > 0 
                        ? stats.achievements.slice(-5).map(a => `
                            <div class="achievement-item">
                                <span class="achievement-title">${a.title}</span>
                                <span class="achievement-desc">${a.description}</span>
                                <span class="achievement-points">+${a.points} –æ—á–∫–æ–≤</span>
                            </div>
                        `).join('')
                        : '<div class="no-achievements">–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>'
                    }
                </div>
            </div>
        </div>
    `;
    
    modal.style.display = 'flex';
}

function closeStatsModal() {
    const modal = document.getElementById('statsModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function resetStats() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        if (window.playerStats) {
            window.playerStats.resetStats();
        }
        closeStatsModal();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (game) {
            game.showMessage('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!');
        }
    }
}

function shareGame() {
    if (!window.playerStats || !window.telegramApp) {
        // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        const shareText = 'üé∞ –ò–≥—Ä–∞—é –≤ BlackJack Casino! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!';
        const shareUrl = window.location.href;
        
        if (navigator.share) {
            navigator.share({
                title: 'BlackJack Casino',
                text: shareText,
                url: shareUrl
            });
        } else {
            // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            const textToCopy = `${shareText}\n${shareUrl}`;
            navigator.clipboard.writeText(textToCopy).then(() => {
                alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        }
        return;
    }
    
    const stats = window.playerStats.getDisplayStats();
    const shareText = `üé∞ BlackJack Casino\n\n` +
                     `üèÜ –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n` +
                     `‚Ä¢ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${stats.totalGames}\n` +
                     `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${stats.winRate}%\n` +
                     `‚Ä¢ –ë–ª—ç–∫–¥–∂–µ–∫–æ–≤: ${stats.blackjacks}\n` +
                     `‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${stats.bestWinStreak}\n\n` +
                     `–ü–æ–ø—Ä–æ–±—É–π –æ–±—ã–≥—Ä–∞—Ç—å –º–µ–Ω—è! üéØ`;
    
    const shareUrl = window.location.href;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    window.telegramApp.shareResult(shareText, shareUrl);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    window.telegramApp.sendAnalyticsEvent('game_shared', {
        totalGames: stats.totalGames,
        winRate: stats.winRate,
        blackjacks: stats.blackjacks
    });
}















// CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    .card-appear {
        animation: cardAppear 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }
    
    @keyframes cardAppear {
        from {
            transform: translateY(-100px) rotateY(180deg);
            opacity: 0;
        }
        to {
            transform: translateY(0) rotateY(0);
            opacity: 1;
        }
    }
    
    .message-update {
        animation: messageUpdate 0.5s ease;
    }
    
    @keyframes messageUpdate {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
`;
document.head.appendChild(style);
