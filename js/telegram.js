// ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM WEB APP =====

class TelegramIntegration {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        this.initTelegram();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    initTelegram() {
        if (!this.tg) {
            console.log('Telegram Web App API –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Web App
        this.tg.ready();
        this.tg.expand();
        this.tg.enableClosingConfirmation();

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.user = this.tg.initDataUnsafe?.user;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        this.setupMainButton();
        this.setupBackButton();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.user);
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (this.user) {
            this.personalizeInterface();
        }
    }
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    personalizeInterface() {
        if (!this.user) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        setTimeout(() => {
            const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${this.user.first_name}! üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!`;
            this.showAlert(welcomeMessage);
        }, 1000);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if (this.user.language_code) {
            document.documentElement.lang = this.user.language_code;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∞
        this.sendAnalyticsEvent('user_session_start', {
            user_id: this.user.id,
            username: this.user.username,
            first_name: this.user.first_name,
            language_code: this.user.language_code,
            is_premium: this.user.is_premium
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    setupTheme() {
        if (!this.tg) return;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        const root = document.documentElement;
        const themeParams = this.tg.themeParams;
        
        if (themeParams.bg_color) {
            root.style.setProperty('--tg-bg-color', themeParams.bg_color);
        }
        
        if (themeParams.text_color) {
            root.style.setProperty('--tg-text-color', themeParams.text_color);
        }
        
        if (themeParams.hint_color) {
            root.style.setProperty('--tg-hint-color', themeParams.hint_color);
        }
        
        if (themeParams.button_color) {
            root.style.setProperty('--tg-button-color', themeParams.button_color);
        }
        
        if (themeParams.button_text_color) {
            root.style.setProperty('--tg-button-text-color', themeParams.button_text_color);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    setupMainButton() {
        if (!this.tg) return;

        this.tg.MainButton.setText('üí∞ –ó–ê–ë–†–ê–¢–¨ –í–´–ò–ì–†–´–®');
        this.tg.MainButton.color = '#00ff88';
        this.tg.MainButton.textColor = '#ffffff';
        this.tg.MainButton.hide();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    setupBackButton() {
        if (!this.tg) return;

        this.tg.BackButton.onClick(() => {
            this.confirmExit();
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers() {
        if (!this.tg) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.tg.MainButton.onClick(() => {
            this.handleMainButtonClick();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è viewport –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.tg.onEvent('viewportChanged', () => {
            this.handleViewportChange();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.tg.onEvent('beforeClose', () => {
            return this.handleBeforeClose();
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å –≤—ã–∏–≥—Ä—ã—à–µ–º
    showMainButtonWithWin(amount) {
        if (!this.tg) return;

        this.tg.MainButton.setText(`üí∞ –ó–ê–ë–†–ê–¢–¨ ${amount} üíé`);
        this.tg.MainButton.show();
        
        // –í–∏–±—Ä–∞—Ü–∏—è
        this.hapticFeedback('success');
    }

    // –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    hideMainButton() {
        if (!this.tg) return;
        this.tg.MainButton.hide();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    handleMainButtonClick() {
        if (!this.tg) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ –≤ –±–æ—Ç–∞
        this.sendGameResult();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showAlert('üí∞ –í—ã–∏–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        this.hideMainButton();
        
        // –í–∏–±—Ä–∞—Ü–∏—è
        this.hapticFeedback('success');
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã –≤ –±–æ—Ç–∞
    sendGameResult() {
        if (!this.tg || !window.game) return;

        const gameData = {
            action: 'game_result',
            user_id: this.user?.id,
            balance: window.game.playerBalance,
            level: window.game.playerLevel,
            bet: window.game.currentBet,
            timestamp: Date.now()
        };

        this.tg.sendData(JSON.stringify(gameData));
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    sendStats(stats) {
        if (!this.tg) return;

        const data = {
            action: 'stats_update',
            user_id: this.user?.id,
            stats: stats,
            timestamp: Date.now()
        };

        this.tg.sendData(JSON.stringify(data));
    }

    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    hapticFeedback(type = 'light') {
        if (!this.tg?.HapticFeedback) return;

        switch (type) {
            case 'success':
                this.tg.HapticFeedback.notificationOccurred('success');
                break;
            case 'error':
                this.tg.HapticFeedback.notificationOccurred('error');
                break;
            case 'warning':
                this.tg.HapticFeedback.notificationOccurred('warning');
                break;
            case 'light':
                this.tg.HapticFeedback.impactOccurred('light');
                break;
            case 'medium':
                this.tg.HapticFeedback.impactOccurred('medium');
                break;
            case 'heavy':
                this.tg.HapticFeedback.impactOccurred('heavy');
                break;
            case 'selection':
                this.tg.HapticFeedback.selectionChanged();
                break;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showAlert(message) {
        if (!this.tg) {
            alert(message);
            return;
        }
        
        this.tg.showAlert(message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showConfirm(message, callback) {
        if (!this.tg) {
            callback(confirm(message));
            return;
        }
        
        this.tg.showConfirm(message, callback);
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
    confirmExit() {
        this.showConfirm(
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã?',
            (confirmed) => {
                if (confirmed) {
                    this.tg.close();
                }
            }
        );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
    handleViewportChange() {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        const viewport = this.tg.viewportHeight;
        const container = document.querySelector('.game-container');
        
        if (container && viewport) {
            container.style.minHeight = `${viewport}px`;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    handleBeforeClose() {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        this.sendSessionData();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        if (window.game && window.game.gameInProgress) {
            this.sendGameResult();
            return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
        }
        return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    getUserInfo() {
        return this.user;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
    isInTelegram() {
        return !!this.tg;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ HeaderColor
    setHeaderColor(color) {
        if (!this.tg) return;
        this.tg.setHeaderColor(color);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    setBackgroundColor(color) {
        if (!this.tg) return;
        this.tg.setBackgroundColor(color);
    }

    // –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É
    openLink(url) {
        if (!this.tg) {
            window.open(url, '_blank');
            return;
        }
        
        this.tg.openLink(url);
    }

    // –û—Ç–∫—Ä—ã—Ç—å Telegram —Å—Å—ã–ª–∫—É
    openTelegramLink(url) {
        if (!this.tg) {
            window.open(url, '_blank');
            return;
        }
        
        this.tg.openTelegramLink(url);
    }

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    shareResult(text, url) {
        if (!this.tg) {
            if (navigator.share) {
                navigator.share({ title: text, url: url });
            } else {
                this.copyToClipboard(text + ' ' + url);
                this.showAlert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            }
            return;
        }

        // –í Telegram –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        this.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`);
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
        }
    }

    // –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    requestPermissions() {
        if (!this.tg) return;
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    sendAnalyticsEvent(eventName, parameters = {}) {
        if (!this.tg) return;

        const analyticsData = {
            action: 'analytics_event',
            event: eventName,
            parameters: {
                ...parameters,
                user_id: this.user?.id,
                timestamp: Date.now()
            }
        };

        this.tg.sendData(JSON.stringify(analyticsData));
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    showAchievementNotification(achievement) {
        if (!this.tg) return;
        
        this.showAlert(`üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n${achievement}`);
        this.hapticFeedback('success');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        this.sendAnalyticsEvent('achievement_notification_shown', {
            achievement: achievement
        });
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
    showWinNotification(amount, result) {
        if (!this.tg) return;
        
        let message = '';
        switch (result) {
            case 'blackjack':
                message = `üéâ –ë–õ–≠–ö–î–ñ–ï–ö!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} üíé`;
                break;
            case 'win':
                message = `üéä –ü–û–ë–ï–î–ê!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${amount} üíé`;
                break;
            default:
                message = `üí∞ –í—ã–∏–≥—Ä—ã—à: ${amount} üíé`;
        }
        
        this.showAlert(message);
        this.hapticFeedback('success');
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    showProgress() {
        if (!this.tg) return;
        
        this.tg.MainButton.showProgress();
    }
    
    // –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    hideProgress() {
        if (!this.tg) return;
        
        this.tg.MainButton.hideProgress();
    }
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    sendSessionData() {
        if (!this.tg || !window.playerStats) return;
        
        const stats = window.playerStats.getDisplayStats();
        const sessionData = {
            action: 'session_end',
            user_id: this.user?.id,
            session_stats: stats.currentSession,
            total_stats: {
                totalGames: stats.totalGames,
                winRate: stats.winRate,
                netProfit: stats.netProfit
            },
            timestamp: Date.now()
        };
        
        this.tg.sendData(JSON.stringify(sessionData));
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
let telegramApp;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    telegramApp = new TelegramIntegration();
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
    const waitForGame = () => {
        if (window.game) {
            setupGameIntegration();
        } else {
            setTimeout(waitForGame, 100);
        }
    };
    waitForGame();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–π
function setupGameIntegration() {
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const originalEndGame = window.game.endGame;
    window.game.endGame = function(result, winAmount = 0) {
        originalEndGame.call(this, result, winAmount);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
        if (telegramApp && winAmount > 0) {
            telegramApp.showMainButtonWithWin(winAmount);
            telegramApp.showWinNotification(winAmount, result);
            telegramApp.sendAnalyticsEvent('game_win', {
                result: result,
                winAmount: winAmount,
                balance: this.playerBalance
            });
        } else if (telegramApp) {
            telegramApp.hapticFeedback('error');
            telegramApp.sendAnalyticsEvent('game_lose', {
                result: result,
                balance: this.playerBalance
            });
        }
    };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–≤—É–∫–æ–≤
    const originalPlaySound = window.game.playSound;
    window.game.playSound = function(type) {
        if (telegramApp) {
            switch (type) {
                case 'win':
                    telegramApp.hapticFeedback('success');
                    break;
                case 'lose':
                    telegramApp.hapticFeedback('error');
                    break;
                case 'deal':
                case 'hit':
                    telegramApp.hapticFeedback('light');
                    break;
                case 'double':
                    telegramApp.hapticFeedback('medium');
                    break;
                default:
                    telegramApp.hapticFeedback('selection');
            }
        }
        
        originalPlaySound.call(this, type);
    };
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    if (window.playerStats) {
        const originalUpdateGameStats = window.playerStats.updateGameStats;
        window.playerStats.updateGameStats = function(result, betAmount, winAmount = 0) {
            originalUpdateGameStats.call(this, result, betAmount, winAmount);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Telegram
            if (telegramApp) {
                const stats = this.getDisplayStats();
                telegramApp.sendStats(stats);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                telegramApp.sendAnalyticsEvent('stats_update', {
                    totalGames: stats.totalGames,
                    winRate: stats.winRate,
                    netProfit: stats.netProfit
                });
            }
        };
    }
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    if (window.game.showAchievement) {
        const originalShowAchievement = window.game.showAchievement;
        window.game.showAchievement = function(text) {
            originalShowAchievement.call(this, text);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            if (telegramApp) {
                telegramApp.showAchievementNotification(text);
                telegramApp.sendAnalyticsEvent('achievement_unlocked', {
                    achievement: text
                });
            }
        };
    }
}
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è Telegram —Ç–µ–º—ã
const telegramStyles = document.createElement('style');
telegramStyles.textContent = `
    /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–µ–º—ã Telegram */
    @media (prefers-color-scheme: light) {
        body {
            background: var(--tg-bg-color, linear-gradient(135deg, #f8f9fa 0%, #e9ecef 50%, #dee2e6 100%));
            color: var(--tg-text-color, #333);
        }
        
        .game-table {
            background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(248,249,250,0.1));
        }
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ Telegram */
    @media (max-width: 480px) {
        .game-container {
            padding: 5px;
        }
        
        .game-header {
            padding: 15px;
        }
        
        .logo-text {
            font-size: 1.5rem;
        }
        
        .action-btn {
            padding: 12px 20px;
            font-size: 1rem;
        }
    }
`;
document.head.appendChild(telegramStyles);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.telegramApp = telegramApp;


