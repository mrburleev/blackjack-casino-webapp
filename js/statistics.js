// ===== –°–ò–°–¢–ï–ú–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ò–ì–†–û–ö–ê =====

class PlayerStatistics {
    constructor() {
        this.stats = {
            totalGames: 0,
            wins: 0,
            losses: 0,
            pushes: 0,
            blackjacks: 0,
            busts: 0,
            totalWinnings: 0,
            totalLosses: 0,
            currentStreak: 0,
            bestWinStreak: 0,
            bestLoseStreak: 0,
            biggestWin: 0,
            biggestLoss: 0,
            handsPlayed: 0,
            averageBet: 0,
            sessionsPlayed: 0,
            timePlayedMinutes: 0,
            lastPlayDate: null,
            achievements: []
        };
        
        this.currentSession = {
            startTime: Date.now(),
            gamesPlayed: 0,
            netWinnings: 0,
            biggestWin: 0,
            winStreak: 0
        };
        
        this.loadStats();
        this.startSession();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
    loadStats() {
        try {
            const savedStats = localStorage.getItem('blackjack_player_stats');
            if (savedStats) {
                this.stats = { ...this.stats, ...JSON.parse(savedStats) };
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
    saveStats() {
        try {
            localStorage.setItem('blackjack_player_stats', JSON.stringify(this.stats));
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    startSession() {
        this.currentSession = {
            startTime: Date.now(),
            gamesPlayed: 0,
            netWinnings: 0,
            biggestWin: 0,
            winStreak: 0
        };
        this.stats.sessionsPlayed++;
        this.stats.lastPlayDate = new Date().toISOString();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    updateGameStats(result, betAmount, winAmount = 0) {
        this.stats.totalGames++;
        this.stats.handsPlayed++;
        this.currentSession.gamesPlayed++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
        this.stats.averageBet = Math.round(
            (this.stats.averageBet * (this.stats.totalGames - 1) + betAmount) / this.stats.totalGames
        );

        switch (result) {
            case 'win':
                this.handleWin(winAmount, betAmount);
                break;
            case 'blackjack':
                this.handleBlackjack(winAmount, betAmount);
                break;
            case 'lose':
            case 'bust':
                this.handleLoss(betAmount);
                break;
            case 'push':
                this.handlePush();
                break;
        }

        this.updateStreaks(result);
        this.saveStats();
        this.checkNewAchievements();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    handleWin(winAmount, betAmount) {
        this.stats.wins++;
        this.stats.totalWinnings += winAmount;
        this.currentSession.netWinnings += winAmount;
        
        const netWin = winAmount - betAmount;
        if (netWin > this.stats.biggestWin) {
            this.stats.biggestWin = netWin;
        }
        if (netWin > this.currentSession.biggestWin) {
            this.currentSession.biggestWin = netWin;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª—ç–∫–¥–∂–µ–∫–∞
    handleBlackjack(winAmount, betAmount) {
        this.stats.blackjacks++;
        this.stats.wins++;
        this.stats.totalWinnings += winAmount;
        this.currentSession.netWinnings += winAmount;
        
        const netWin = winAmount - betAmount;
        if (netWin > this.stats.biggestWin) {
            this.stats.biggestWin = netWin;
        }
        if (netWin > this.currentSession.biggestWin) {
            this.currentSession.biggestWin = netWin;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
    handleLoss(betAmount) {
        this.stats.losses++;
        this.stats.totalLosses += betAmount;
        this.currentSession.netWinnings -= betAmount;
        
        if (betAmount > this.stats.biggestLoss) {
            this.stats.biggestLoss = betAmount;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏—á—å–∏
    handlePush() {
        this.stats.pushes++;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π
    updateStreaks(result) {
        if (result === 'win' || result === 'blackjack') {
            if (this.stats.currentStreak >= 0) {
                this.stats.currentStreak++;
            } else {
                this.stats.currentStreak = 1;
            }
            
            if (this.stats.currentStreak > this.stats.bestWinStreak) {
                this.stats.bestWinStreak = this.stats.currentStreak;
            }
            
            this.currentSession.winStreak++;
        } else if (result === 'lose' || result === 'bust') {
            if (this.stats.currentStreak <= 0) {
                this.stats.currentStreak--;
            } else {
                this.stats.currentStreak = -1;
            }
            
            if (Math.abs(this.stats.currentStreak) > this.stats.bestLoseStreak) {
                this.stats.bestLoseStreak = Math.abs(this.stats.currentStreak);
            }
            
            this.currentSession.winStreak = 0;
        }
        // –ü—Ä–∏ push —Å–µ—Ä–∏—è –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkNewAchievements() {
        const newAchievements = [];

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä
        if (this.stats.totalGames >= 10 && !this.hasAchievement('first_10_games')) {
            newAchievements.push({
                id: 'first_10_games',
                title: 'üéØ –ù–æ–≤–∏—á–æ–∫',
                description: '–°—ã–≥—Ä–∞–ª 10 –∏–≥—Ä',
                points: 50
            });
        }

        if (this.stats.totalGames >= 100 && !this.hasAchievement('first_100_games')) {
            newAchievements.push({
                id: 'first_100_games',
                title: 'üéÆ –û–ø—ã—Ç–Ω—ã–π –∏–≥—Ä–æ–∫',
                description: '–°—ã–≥—Ä–∞–ª 100 –∏–≥—Ä',
                points: 200
            });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–ª—ç–∫–¥–∂–µ–∫–∞–º
        if (this.stats.blackjacks >= 5 && !this.hasAchievement('blackjack_master')) {
            newAchievements.push({
                id: 'blackjack_master',
                title: 'üÉè –ú–∞—Å—Ç–µ—Ä –±–ª—ç–∫–¥–∂–µ–∫–∞',
                description: '–ü–æ–ª—É—á–∏–ª 5 –±–ª—ç–∫–¥–∂–µ–∫–æ–≤',
                points: 150
            });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å–µ—Ä–∏—è–º
        if (this.stats.bestWinStreak >= 5 && !this.hasAchievement('win_streak_5')) {
            newAchievements.push({
                id: 'win_streak_5',
                title: 'üî• –ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è',
                description: '–í—ã–∏–≥—Ä–∞–ª 5 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
                points: 100
            });
        }

        if (this.stats.bestWinStreak >= 10 && !this.hasAchievement('win_streak_10')) {
            newAchievements.push({
                id: 'win_streak_10',
                title: 'üöÄ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–µ—Ä–∏—è',
                description: '–í—ã–∏–≥—Ä–∞–ª 10 –∏–≥—Ä –ø–æ–¥—Ä—è–¥',
                points: 300
            });
        }

        // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –≤—ã–∏–≥—Ä—ã—à–∞–º
        if (this.stats.totalWinnings >= 5000 && !this.hasAchievement('big_winner')) {
            newAchievements.push({
                id: 'big_winner',
                title: 'üí∞ –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à',
                description: '–í—ã–∏–≥—Ä–∞–ª 5000 –º–æ–Ω–µ—Ç',
                points: 250
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        newAchievements.forEach(achievement => {
            this.stats.achievements.push(achievement);
        });

        return newAchievements;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    hasAchievement(achievementId) {
        return this.stats.achievements.some(a => a.id === achievementId);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    getDisplayStats() {
        const winRate = this.stats.totalGames > 0 
            ? Math.round((this.stats.wins / this.stats.totalGames) * 100) 
            : 0;
        
        const netProfit = this.stats.totalWinnings - this.stats.totalLosses;
        
        const timePlayedHours = Math.round(this.stats.timePlayedMinutes / 60 * 10) / 10;
        
        return {
            // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            totalGames: this.stats.totalGames,
            winRate: winRate,
            netProfit: netProfit,
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            wins: this.stats.wins,
            losses: this.stats.losses,
            pushes: this.stats.pushes,
            blackjacks: this.stats.blackjacks,
            
            // –°–µ—Ä–∏–∏
            currentStreak: this.stats.currentStreak,
            bestWinStreak: this.stats.bestWinStreak,
            bestLoseStreak: this.stats.bestLoseStreak,
            
            // –†–µ–∫–æ—Ä–¥—ã
            biggestWin: this.stats.biggestWin,
            biggestLoss: this.stats.biggestLoss,
            averageBet: this.stats.averageBet,
            
            // –í—Ä–µ–º—è –∏–≥—Ä—ã
            sessionsPlayed: this.stats.sessionsPlayed,
            timePlayedHours: timePlayedHours,
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements: this.stats.achievements,
            totalAchievements: this.stats.achievements.length,
            
            // –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
            currentSession: {
                ...this.currentSession,
                duration: Math.round((Date.now() - this.currentSession.startTime) / 60000)
            }
        };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
    updatePlayTime() {
        if (this.currentSession.startTime) {
            const sessionTime = Math.round((Date.now() - this.currentSession.startTime) / 60000);
            this.stats.timePlayedMinutes += sessionTime;
            this.currentSession.startTime = Date.now();
            this.saveStats();
        }
    }

    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    resetStats() {
        this.stats = {
            totalGames: 0,
            wins: 0,
            losses: 0,
            pushes: 0,
            blackjacks: 0,
            busts: 0,
            totalWinnings: 0,
            totalLosses: 0,
            currentStreak: 0,
            bestWinStreak: 0,
            bestLoseStreak: 0,
            biggestWin: 0,
            biggestLoss: 0,
            handsPlayed: 0,
            averageBet: 0,
            sessionsPlayed: 0,
            timePlayedMinutes: 0,
            lastPlayDate: null,
            achievements: []
        };
        this.saveStats();
        this.startSession();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
window.playerStats = new PlayerStatistics();
